__option__:
  # 技能名称
  name: "背刺"
  # 是否异步执行
  async: false
  # 图标配置
  icon-formatter:
    # 物品材质
    material: IRON_SWORD
    # 显示名称
    name: "背刺"
    # 描述信息
    lore:
      - "技能等级 {{ ctx skill level }}"
      - "技能伤害 {{ lazy *damage }}"
      - "冷却时间 {{ lazy *cooldown }}秒"
      - "消耗法力 {{ lazy *mp_cost }}"
      - "从背后攻击敌人造成额外伤害"
  # 技能分类
  category: 
    - "刺客"
    - "小技能"
  # 变量定义
  variables:
    # 冷却时间(tick)
    cooldown: 80
    # 伤害计算公式
    damage: math 60 + ctx skill level * 15
    # 法力消耗
    mp_cost: 25
    # 攻击范围
    attack_range: 2.5
    # 背刺伤害倍数
    backstab_multiplier: 2.5
    # 技能权重
    skill_weight: 1.5
# 技能脚本
action: |
  def main = {
    # 检查玩家状态是否允许释放技能
    if any [ check metadata 状态 contains 前摇 check metadata 控制 contains 沉默 check metadata 状态 contains 硬直 ] then {
      # 重置冷却时间并退出
      cooldown reset
      exit success
    }
    # 检查法力值是否足够
    if check profile mp < lazy mp_cost then {
      tell "法力不足！"
      cooldown reset
      exit success
    }
    # 初始化玩家状态
    call initPlayerState
    # 等待前摇时间
    wait 0.2s
    # 执行背刺
    call executeBackstab
    # 等待后摇时间
    wait 0.3s
    # 结束技能效果
    call endSkill
  }
  def initPlayerState = {
    # 消耗法力值
    profile mp take lazy mp_cost
    # 设置前摇状态
    metadata 状态 to 前摇_背刺 timeout 8
    # 播放技能动画
    command inline "gp model cast {{ player name }} assassin_backstab_animation" as console
    # 播放音效
    command inline "gp sound play {{ player name }} assassin_backstab_sound player" as console
    # 向前冲刺
    velocity move "0 0 0.6" at @sender
  }
  def executeBackstab = {
    # 检查是否仍在前摇状态
    if not check metadata 状态 contains 前摇_背刺 then {
      exit success
    }
    # 选择攻击目标
    set targets to select @rectangle 2 2 lazy attack_range offset "0 0 1" debug false @their
    # 检查是否为背后攻击
    set is_backstab to false
    foreach &targets as target then {
      # 计算玩家与目标的相对位置
      set target_yaw to entity &target yaw
      set player_yaw to player yaw
      set angle_diff to math abs(&target_yaw - &player_yaw)
      # 如果角度差小于45度，则为背刺
      if check &angle_diff < 45 or &angle_diff > 315 then {
        set is_backstab to true
      }
    }
    # 根据是否背刺计算伤害
    if check &is_backstab is true then {
      # 背刺伤害
      ap-attack 技能权重+math lazy skill_weight * lazy backstab_multiplier,刺选择+25 at &targets
      # 播放背刺特效
      mythic mob signal BackstabCritical at &targets
      # 发送背刺消息
      tell "成功背刺！造成额外伤害！"
    } else {
      # 普通伤害
      ap-attack 技能权重+lazy skill_weight,刺选择+15 at &targets
      # 播放普通攻击特效
      mythic mob signal BackstabNormal at &targets
    }
    # 设置后摇状态
    metadata 状态 to 后摇_背刺 timeout 8
  }
  def endSkill = {
    # 停止动画
    command inline "gp model stop {{ player name }} assassin_backstab_animation" as console
  }
